// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Staff {
  userid             Int             @id @default(autoincrement())
  first_name         String
  last_name          String
  username           String          @unique
  password           String
  suspended_flg      Boolean         @default(false)
  admin_flg          Boolean?
  circ_flg           Boolean?
  circ_mbr_flg       Boolean?
  catalog_flg        Boolean?
  reports_flg        Boolean?
  last_change_userid Int?
  staff              Staff?          @relation("updatedBy", fields: [last_change_userid], references: [userid])
  member_account     MemberAccount[]
  biblio             Biblio[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Member    Member[]
  Staff     Staff[]  @relation("updatedBy")

  @@map("staff")
}

model Member {
  mbrid              Int                @id @default(autoincrement())
  barcode_nmbr       String             @unique @db.VarChar(20)
  last_change_userid Int
  first_name         String
  last_name          String
  address            String?
  home_phone         String?
  work_phone         String?
  email              String?            
  code               MemberClassifyDM   @relation(fields: [classification], references: [code])
  staff              Staff              @relation(fields: [last_change_userid], references: [userid])
  classification     Int
  member_account     MemberAccount[]
  biblio_copy        BiblioCopy[]
  biblio_status_hist BiblioStatusHist[]
  member_fields      MemberField[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  BiblioHold BiblioHold[]
  BiblioRank BiblioRank[]

  @@map("member")
}

model MemberClassifyDM {
  code          Int             @id @default(autoincrement())
  description   String
  default_flg   Boolean         @default(false)
  max_fines     Decimal         @default(0) @db.Decimal(4, 2)
  member        Member[]
  CheckoutPrivs CheckoutPrivs[]

  @@map("mbr_classify_dm")
}

model MemberFieldDM {
  code          String        @id
  description   String        @unique
  default_flg   Boolean       @default(false)
  member_fields MemberField[]

  @@map("member_fields_dm")
}

model MemberField {
  id                   Int           @id @default(autoincrement())
  mbrid                Int
  code                 String
  data                 String
  member_field_dm_code MemberFieldDM @relation(fields: [code], references: [code])
  member               Member        @relation(fields: [mbrid], references: [mbrid], onDelete: Cascade)

  @@map("member_fields")
}

model MemberAccount {
  id                  Int               @id @default(autoincrement())
  transid             Int
  mbrid               Int
  create_userid       Int
  transaction_type    String
  amount              Decimal
  description         String
  staff               Staff             @relation(fields: [create_userid], references: [userid])
  member              Member            @relation(fields: [mbrid], references: [mbrid], onDelete: Cascade)
  transaction_type_dm TransactionTypeDM @relation(fields: [transaction_type], references: [code])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("member_account")
}

model CollectionDM {
  code           Int      @id @default(autoincrement())
  description    String
  default_flg    Boolean  @default(false)
  days_due_back  Int
  daily_late_fee Decimal  @default(0)
  biblio         Biblio[]

  @@map("collection_dm")
}

model MaterialTypeDM {
  code          Int             @id @default(autoincrement())
  description   String          @unique
  default_flg   Boolean         @default(false)
  image_file    String?
  biblio        Biblio[]
  CheckoutPrivs CheckoutPrivs[]

  @@map("material_type_dm")
}

model Biblio {
  bibid               Int                @id @default(autoincrement())
  title               String
  title_remainder     String?
  author              String
  responsibility_stmt String?
  material_cd         Int
  collection_cd       Int
  call_nmbr1          String
  call_nmbr2          String?
  call_nmbr3          String?
  topic1              String?
  topic2              String?
  topic3              String?
  topic4              String?
  topic5              String?
  last_change_userid  Int
  opac_flg            Boolean            @default(true)
  user                Staff              @relation(fields: [last_change_userid], references: [userid])
  collection          CollectionDM       @relation(fields: [collection_cd], references: [code])
  material            MaterialTypeDM     @relation(fields: [material_cd], references: [code])
  biblio_field        BiblioField[]
  biblio_copy         BiblioCopy[]
  BiblioStatusHist    BiblioStatusHist[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  BiblioHold  BiblioHold[]
  BiblioMedia BiblioMedia[]
  BiblioRank  BiblioRank[]

  @@map("biblio")
}

model BiblioMedia {
  id          Int     @id @default(autoincrement())
  bibid       Int
  imageUrl    String?
  rank        Int     @default(0)
  count_ranks Int     @default(0)
  description String?
  biblio      Biblio  @relation(fields: [bibid], references: [bibid], onDelete: Cascade)

  @@map("biblio_media")
}

model BiblioRank {
  id        Int      @id @default(autoincrement())
  rank      Int
  comment   String?
  bibid     Int
  mbrid     Int
  createdAt DateTime @default(now())

  member      Member @relation(fields: [mbrid], references: [mbrid])
  biblioMedia Biblio @relation(fields: [bibid], references: [bibid], onDelete: Cascade)

  @@map("biblio_rank")
}

model BiblioField {
  id            Int         @id @default(autoincrement())
  fieldid       Int
  bibid         Int
  biblio        Biblio      @relation(fields: [bibid], references: [bibid], onDelete: Cascade)
  tag           Int
  ind1_cd       String      @default("N")
  ind2_cd       String      @default("N")
  subfield_cd   String
  field_data    String
  usmarc_tag_dm UsmarcTagDM @relation(fields: [tag], references: [tag])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("biblio_field")
}

model BiblioStatusDM {
  code               String             @id
  description        String?
  default_flg        Boolean            @default(false)
  biblio_copy        BiblioCopy[]
  biblio_status_hist BiblioStatusHist[]

  @@map("biblio_status_dm")
}

model BiblioCopy {
  id              Int       @id @default(autoincrement())
  bibid           Int
  copyid          Int
  create_dt       DateTime  @default(now())
  copy_desc       String?
  barcode_nmbr    String    @unique
  status_cd       String    @default("in")
  status_begin_dt DateTime  @default(now())
  due_back_dt     DateTime?
  mbrid           Int?
  renewal_count   Int       @default(0)

  biblio_status_dm BiblioStatusDM     @relation(fields: [status_cd], references: [code], onDelete: Cascade)
  member           Member?            @relation(fields: [mbrid], references: [mbrid], onDelete: Cascade)
  biblio           Biblio             @relation(fields: [bibid], references: [bibid], onDelete: Cascade)
  BiblioStatusHist BiblioStatusHist[]
  BiblioHold       BiblioHold[]

  @@map("biblio_copy")
}

model BiblioStatusHist {
  id              Int       @id @default(autoincrement())
  bibid           Int
  copyid          Int
  status_cd       String
  status_begin_dt DateTime  @default(now())
  due_back_dt     DateTime?
  mbrid           Int
  renewal_count   Int       @default(0)

  biblio_copy      BiblioCopy     @relation(fields: [copyid], references: [id])
  member           Member         @relation(fields: [mbrid], references: [mbrid])
  biblio           Biblio         @relation(fields: [bibid], references: [bibid])
  biblio_status_dm BiblioStatusDM @relation(fields: [status_cd], references: [code])

  @@map("biblio_status_hist")
}

model BiblioHold {
  id     Int @id @default(autoincrement())
  holdid Int
  copyid Int
  mbrid  Int
  bibid  Int

  biblio      Biblio     @relation(fields: [bibid], references: [bibid])
  member      Member     @relation(fields: [mbrid], references: [mbrid])
  biblio_copy BiblioCopy @relation(fields: [copyid], references: [id])

  @@map("biblio_hold")
}

model TransactionTypeDM {
  code           String          @id
  description    String
  default_flg    Boolean
  member_account MemberAccount[]

  @@map("transaction_type_dm")
}

model UsmarcBlockDM {
  block_nmbr    Int           @id @default(autoincrement())
  description   String
  usmarc_tag_dm UsmarcTagDM[]

  @@map("usmarc_block_dm")
}

model UsmarcTagDM {
  tag                 Int                 @id
  description         String
  ind1_description    String?
  ind2_description    String?
  repeatable_flg      Boolean             @default(false)
  block_nmbr          Int?
  block               UsmarcBlockDM?      @relation(fields: [block_nmbr], references: [block_nmbr])
  biblio_fields       BiblioField[]
  usmarc_subfield_dm  UsmarcSubfieldDM[]
  usmarc_indicator_dm UsmarkIndicatorDM[]

  @@map("usmarc_tag_dm")
}

model UsmarcSubfieldDM {
  id             Int         @id @default(autoincrement())
  tag            Int
  subfield_cd    String
  description    String?
  repeatable_flg Boolean     @default(false)
  required       Boolean     @default(false) 
  usmarc_tag_dm  UsmarcTagDM @relation(fields: [tag], references: [tag])

  @@map("usmarc_subfield_dm")
}

model UsmarkIndicatorDM {
  id             Int         @id @default(autoincrement())
  tag            Int
  indicator_cd   String
  indicator_nmbr Int
  description    String?
  usmarc_tag_dm  UsmarcTagDM @relation(fields: [tag], references: [tag])

  @@map("usmarc_indicator_dm")
}

model CheckoutPrivs {
  id             Int @id @default(autoincrement())
  material_cd    Int
  classification Int
  checkout_limit Int
  renewal_limit  Int

  material_type_dm MaterialTypeDM   @relation(fields: [material_cd], references: [code], onDelete: Cascade)
  mbr_classify_dm  MemberClassifyDM @relation(fields: [classification], references: [code], onDelete: Cascade)

  @@map("checkout_privs")
}
